package com.hopcape.mobile.auth.api.config

import com.hopcape.networking.api.Url

/**
 * Represents the endpoints used for authentication-related API calls.
 *
 * This data class encapsulates all the URLs required for various authentication operations,
 * such as login, registration, OTP handling, and social logins (Google and Facebook).
 *
 * Example Usage:
 * ```kotlin
 * val authEndpoints = EndPoints(
 *     loginEndpoint = Url("https://api.example.com/auth/login"),
 *     registerEndpoint = Url("https://api.example.com/auth/register"),
 *     requestOtpEndpoint = Url("https://api.example.com/auth/request-otp"),
 *     verifyOtpEndpoint = Url("https://api.example.com/auth/verify-otp"),
 *     googleLoginEndpoint = Url("https://api.example.com/auth/google-login"),
 *     facebookLoginEndpoint = Url("https://api.example.com/auth/facebook-login")
 * )
 *
 * // Accessing individual endpoints
 * println("Login Endpoint: ${authEndpoints.loginEndpoint}")
 * println("Register Endpoint: ${authEndpoints.registerEndpoint}")
 * ```
 */
data class EndPoints(
    /**
     * The URL for the user login endpoint.
     *
     * This endpoint is used to authenticate users by validating their credentials
     * (e.g., email and password). Upon successful authentication, the server typically
     * returns an access token or session information.
     *
     * Example:
     * ```
     * https://api.example.com/auth/login
     * ```
     */
    val loginEndpoint: Url,

    /**
     * The URL for the user registration endpoint.
     *
     * This endpoint is used to create a new user account by providing necessary details
     * such as name, email, and password. The server validates the input and creates a new
     * user record if the data is valid.
     *
     * Example:
     * ```
     * https://api.example.com/auth/register
     * ```
     */
    val registerEndpoint: Url,

    /**
     * The URL for requesting an OTP (One-Time Password).
     *
     * This endpoint is used to request a one-time password, typically sent via SMS or email,
     * for purposes like account verification or password recovery. The server generates
     * and sends the OTP to the provided contact information.
     *
     * Example:
     * ```
     * https://api.example.com/auth/request-otp
     * ```
     */
    val requestOtpEndpoint: Url,

    /**
     * The URL for verifying an OTP (One-Time Password).
     *
     * This endpoint is used to validate the OTP provided by the user. If the OTP matches
     * the one generated by the server, the user's action (e.g., account verification or
     * password reset) is completed successfully.
     *
     * Example:
     * ```
     * https://api.example.com/auth/verify-otp
     * ```
     */
    val verifyOtpEndpoint: Url,

    /**
     * The URL for Google-based login.
     *
     * This endpoint is used to authenticate users via their Google account. The user is
     * redirected to Google's OAuth consent screen, and upon successful authentication,
     * the server receives a token that can be exchanged for user information.
     *
     * Example:
     * ```
     * https://api.example.com/auth/google-login
     * ```
     */
    val googleLoginEndpoint: Url,

    /**
     * The URL for Facebook-based login.
     *
     * This endpoint is used to authenticate users via their Facebook account. Similar to
     * Google login, the user is redirected to Facebook's OAuth consent screen, and upon
     * successful authentication, the server receives a token for further processing.
     *
     * Example:
     * ```
     * https://api.example.com/auth/facebook-login
     * ```
     */
    val facebookLoginEndpoint: Url
)